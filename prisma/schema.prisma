// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  secret    String?
  salt      String
  verified  Boolean
  role      Role     @default(GUEST)
  posts     Post[]
  products  Product[]
  sessions  Session[]
  basicInfo BasicInfo?
  quote     Quote?
  domain    Domain?
  avatar    Avatar? 
  cover     Cover?
  tartan    Tartan?
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  published Boolean? @default(false)
  author    User    @relation(fields:[authorId], references:[id])
  authorId  String  @db.ObjectId
}

enum Role {
  GUEST
  MEMBER
  PUBLISHER
  DEVELOPER
  ADMIN
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String   
  content     String?
  price       Float
  owner       User      @relation(fields:[ownerId], references:[id])
  ownerId     String    @db.ObjectId
}

model Session {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  token       String    @unique
  valid       Boolean   @default(false)
  userAgent   String?
  language    String?
  referer     String?
  isMobile    Boolean?
  user        User      @relation(fields:[userId], references:[id])
  userId      String    @db.ObjectId
}

// BasicInfo

model FullName {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String?
  lastName        String?
  basicInfo       BasicInfo @relation(fields:[basicInfoId], references:[id]) 
  basicInfoId     String    @db.ObjectId @unique
}

model Career {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  company     String?
  role        String?
  basicInfo   BasicInfo @relation(fields:[basicInfoId], references:[id])
  basicInfoId String    @db.ObjectId @unique
}

model Education {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  university  String?
  faculty     String?
  basicInfo   BasicInfo @relation(fields:[basicInfoId], references:[id])
  basicInfoId String    @db.ObjectId @unique
}

model Location {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  country     String?
  region      String?
  timeZone    String?
  basicInfo   BasicInfo @relation(fields:[basicInfoId], references:[id])
  basicInfoId String    @db.ObjectId @unique
}

model BasicInfo {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  fullName   FullName?
  career     Career?
  education  Education?
  location   Location?
}

model Quote {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  content    String?
}

model Domain {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  value      String?   @unique
}

model Avatar {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  url        String?   
}

model Cover {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  url        String?   
}

model Tartan {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields:[userId], references:[id]) 
  userId     String    @db.ObjectId @unique
  pattern    String?
  hashed     String? 
  url        String? 
}